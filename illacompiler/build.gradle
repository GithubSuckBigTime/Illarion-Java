/*
 * This file is part of the Illarion Compiler.
 *
 * Copyright Â© 2013 - Illarion e.V.
 *
 * The Illarion Compiler is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Illarion Compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Illarion Compiler.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'java'
apply plugin: 'application'

archivesBaseName = 'illarion_compiler'
mainClassName = 'illarion.compile.Compiler'

dependencies {
    compile project(':common')
    compile project(':easynpc')
    compile project(':easyquest')
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
}

jar {
    dependsOn { gitVersion }
    manifest {
        attributes      \
              'Main-Class': 'illarion.compile.Compiler',      \
             'Permissions': 'all-permissions',     \
             'Codebase': 'illarion.org',     \
             'Application-Name': 'Illarion Compiler',     \
             'Application-Library-Allowable-Codebase': 'illarion.org',     \
             'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ssZ'),     \
             'Built-By': System.getProperty('user.name'),      \
             'Built-JDK': System.getProperty('java.version'),      \
             'Implementation-Title': 'Illarion Compiler',      \
             'Implementation-Vendor': 'Illarion e.V.',     \
             'Implementation-Version': project.ext.fullVersion
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: 'jar') {
    final def mainFile = new File(project.buildDir, "libs/${project.archivesBaseName}-${project.version}.jar")
            .absolutePath
    injars(mainFile)
    configurations.runtime.each { File file ->
        if (file.absolutePath.startsWith(System.getProperty('java.home'))) {
            libraryjars file.absolutePath
        } else {
            def filter = "!META-INF/*,!META-INF/plexus/*,!META-INF/sisu/*,!META-INF/maven/**,!about.html,!LICENSE," +
                    "!OSGI-OPT/**,!**/packageinfo,!**.java,!xmlns/**"
            if (file.absolutePath.contains("xpp3")) {
                filter += ",!javax/xml/namespace/QName.class"
            }
            if (file.absolutePath.contains("illarion")) {
                filter += ",!*.png,!cloths.dat"
            }
            if (file.absolutePath.contains("javolution-core-java")) {
                filter += ",!org/osgi/**"
            }
            if (!file.absolutePath.contains("jcl-over-slf4j")) {
                injars([filter: filter], file.absolutePath)
            }
        }
    }

    libraryjars files("${System.getProperty('java.home')}/lib/jce.jar")
    libraryjars files("${System.getProperty('java.home')}/lib/rt.jar")

    outjars new File(project.buildDir, "compiler.jar").absolutePath

    /* Forcing all class files to contain the same codebase level. */
    target "1.7"

    /* Optimization settings */
    dontoptimize
    optimizationpasses 1
    allowaccessmodification
    mergeinterfacesaggressively

    /* Obfuscation settings */
    dontobfuscate

    renamesourcefileattribute "SourceFile"
    keepattributes "SourceFile,LineNumberTable"
    keepattributes "*Annotation*"

    keepclasseswithmembers "public class illarion.compile.Compiler {" +
            "public static void main(java.lang.String[]);" +
            "}"

    keepclasseswithmembernames "class * {" +
            "native <methods>;" +
            "}"

    keepclassmembers "class * {" +
            "@illarion.common.util.CalledByReflection *;" +
            "}"

    keepclassmembers "class * extends java.lang.Enum {" +
            "public static **[] values();" +
            "public static ** valueOf(java.lang.String);" +
            "}"

    keepclassmembers "class * implements java.io.Serializable {" +
            "static final long serialVersionUID;" +
            "static final java.io.ObjectStreamField[] serialPersistentFields;" +
            "private void writeObject(java.io.ObjectOutputStream);" +
            "private void readObject(java.io.ObjectInputStream);" +
            "java.lang.Object writeReplace();" +
            "java.lang.Object readResolve();" +
            "}"

    keep "class org.apache.log4j.ConsoleAppender"
    keep "class org.apache.log4j.PatternLayout"
    keep "class illarion.compile.impl.EasyQuestCompile"
    keep "class illarion.compile.impl.EasyNpcCompile"
    keep "class org.xmlpull.mxp1.MXParserFactory"

    keepclasseswithmembers "class org.apache.log4j.PatternLayout {" +
            "void setConversionPattern(java.lang.String);" +
            "java.lang.String getConversionPattern();" +
            "}"

    keepclassmembers "class org.apache.commons.logging.impl.SimpleLog {" +
            "<init>(java.lang.String);" +
            "}"

    keepclasseswithmembers "class * {" +
            "org.apache.commons.logging.Log getLog(java.lang.String);" +
            "}"

    dontwarn "com.sun.**"
    dontwarn "javax.servlet.**"
    dontwarn "javax.mail.**"
    dontwarn "javax.jms.**"
    dontwarn "javax.xml.**"
    dontwarn "org.pushingpixels.**"
    dontwarn "org.apache.commons.**"
    dontwarn "org.apache.axis.**"
    dontwarn "org.mantisbt.**"
    dontwarn "org.osgi.service.**"
    dontnote "javax.xml.**"
}


if (project.hasProperty('compilerDir')) {
    task publishBundle(type: Copy, dependsOn: 'proguard') {
        from new File(project.buildDir, "compiler.jar").absolutePath
        into file(project.compilerDir)
    }
    task publish(dependsOn: "publishBundle") {}
}

build.dependsOn("proguard")