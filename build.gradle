/*
 * This file is part of the Illarion Java Applications.
 *
 * Copyright Â© 2013 - Illarion e.V.
 *
 * The Illarion Java Applications is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Illarion Java Applications is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Illarion Java Applications.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'idea'

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

allprojects {
    project.sourceCompatibility = JavaVersion.VERSION_1_6
    project.targetCompatibility = JavaVersion.VERSION_1_6

    task gitVersion {
        def gitVersion = 'unknown'
        try {
            def proc = 'git describe --tags head'.execute(null as String[], project.rootDir)
            gitVersion = proc.in.readLines().get(0)
        } catch (ignored) {
        }

        def String mainVersion
        def indexOfSeparator = gitVersion.indexOf('-')
        if (indexOfSeparator == -1) {
            mainVersion = gitVersion
        } else {
            mainVersion = gitVersion.substring(0, indexOfSeparator) + '-SNAPSHOT'
        }

        project.version = mainVersion
        project.ext.fullVersion = gitVersion
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.2-rc1'
        classpath group: 'net.sf.proguard', name: 'proguard-gradle', version: '4+'
    }
}

subprojects {
    project.group = 'org.illarion'

    repositories {
        mavenCentral()
        maven {
            url 'http://illarion.org/media/java/maven'
        }
        maven {
            url 'http://nifty-gui.sourceforge.net/nifty-maven-repo'
        }
        maven {
            url 'http://libgdx.badlogicgames.com/nightlies/maven'
        }
    }
}

idea {
    project {
        ipr {
            beforeMerged { project->
                project.ipr {
                    withXml {
                        def Node node = it.asNode()
                        if (node.name() == 'component' && node.attribute('name') == 'ProjectRunConfigurationManager') {
                            for (def child : node.children()) {
                                if (child instanceof Node) {
                                    def childNode = child as Node;
                                    node.remove(childNode);
                                }
                            }
                        }
                    }
                }
            }

            whenMerged { project->
                project.ipr {
                    withXml {
                        def Node node = it.asNode()
                        if (node.name() == 'project') {
                            def foundConfigurationManager = false;
                            for (def child : node.children()) {
                                if (child instanceof Node) {
                                    def childNode = child as Node;
                                    if (childNode.name() == 'component' && childNode.attribute('name') == 'ProjectRunConfigurationManager') {
                                        foundConfigurationManager = true;
                                        break;
                                    }
                                }
                            }

                            if (!foundConfigurationManager) {
                                node.appendNode('component', [name: 'ProjectRunConfigurationManager'])
                            }
                        } else if (node.name() == 'component' && node.attribute('name') == 'ProjectRunConfigurationManager') {
                            def illaClient = node.appendNode('configuration', [name: 'Illarion Client', type: 'Application', factoryName: 'Application', singleton: true, default: false])
                            illaClient.appendNode('option', [name: 'MAIN_CLASS_NAME', value: 'illarion.client.IllaClient'])
                            illaClient.appendNode('option', [name: 'WORKING_DIRECTORY', value: 'file://$PROJECT_DIR$'])
                            illaClient.appendNode('module', [name: 'client'])
                        }
                    }
                }
            }
        }
    }
}